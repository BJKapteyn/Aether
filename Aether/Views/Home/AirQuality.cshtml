@model DisplayToUserInformation

@*<p>The Air Quality(AQI) For Your Location is </p><br>

<p>O3: @Model.AQIO3</p><br>
<p>PM 10: @Model.AQIPM10</p><br>
<p>PM 2.5: @Model.AQIPM25</p><br>
<p>CO: @Model.AQICO</p><br>
<p>SO2: @Model.AQISO2</p><br>
<p>NO2: @Model.AQINO2</p>
<p>CO 1-Day: @Model.FutureAQIs[0].COAQI</p>
<p>CO 3-Day: @Model.FutureAQIs[1].COAQI</p>
<p>CO 5-Day: @Model.FutureAQIs[2].COAQI</p>
<p>O3 1-Day: @Model.FutureAQIs[0].O3AQI</p>
<p>O3 3-Day: @Model.FutureAQIs[1].O3AQI</p>
<p>O3 5-Day: @Model.FutureAQIs[2].O3AQI</p>
<p>NO2 1-Day: @Model.FutureAQIs[0].NO2AQI</p>
<p>NO2 3-Day: @Model.FutureAQIs[1].NO2AQI</p>
<p>NO2 5-Day: @Model.FutureAQIs[2].NO2AQI</p>

<p>Sensor Name: @Model.SensorName</p>*@
<!DOCTYPE html>
<head>

    <title>Aether</title>
    <link rel="stylesheet" href="~/css/MyCss.css" />
    <link href="https://fonts.googleapis.com/css?family=Open+Sans%7CSyncopate:700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Titillium+Web&display=swap" rel="stylesheet">
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>

</head>

<body>

    <nav class="nav-container">

        <div>
            <a class="logo" href="#!/home">Aether</a>
        </div>

        <ul class="nav-items">
            <li class="nav-item"><a href="#!/home"> Home</a></li>
            <li class="nav-item"><a href="#!/home"> About</a></li>
            <li class="nav-item"><a href="#!/home">Contact</a></li>
        </ul>
    </nav>
    <script src="~/js/ColorChanger.js"></script>

    <main class="sky-image">

        <div class="pulled-data current data">
            <h3>Your Results</h3>
            <div id="highestAQI" class="circle">@Math.Round(Model.HighestAQI)</div>
            <h4>Taken from a sensor on @Model.Sensor.CrossStreet</h4>
            <script>
                getColor("highestAQI");
            </script>
            <div class="air-quality">
                <div class="results-box">
                    @if (Model.AQICO > 0)
                    {
                        <div class="column">
                            <div id="coAQI" class="circles">
                                <div>@Math.Round(Model.AQICO)</div>
                            </div>
                            <p class="name">CO</p>
                            <script>
                                getColor("coAQI");
                            </script>
                        </div>
                    }
                    @if (Model.AQINO2 > 0)
                    {
                        <div class="column">
                            <div id="no2AQI" class="circles">
                                <div>@Math.Round(Model.AQINO2)</div>
                            </div>
                            <p class="name">NO2</p>
                            <script>
                                getColor("no2AQI");
                            </script>
                        </div>
                    }
                    @if (Model.AQIO3 > 0)
                    {
                        <div class="column">
                            <div id="o3AQI" class="circles">
                                <div>@Math.Round(Model.AQIO3)</div>
                            </div>
                            <p class="name">O3</p>
                            <script>
                                getColor("o3AQI");
                            </script>
                        </div>
                    }
                    @if (Model.AQISO2 > 0)
                    {
                        <div class="column">
                            <div id="so2" class="circles">
                                <div>@Math.Round(Model.AQISO2)</div>
                            </div>
                            <p class="name">SO2</p>
                            <script>
                                getColor("so2AQI");
                            </script>
                        </div>
                    }
                    @if (Model.AQIPM25 > 0)
                    {
                        <div class="column">
                            <div id="pm25AQI" class="circles">
                                <div>@Math.Round(Model.AQIPM25)</div>
                            </div>
                            <p class="name">PM 2.5</p>
                            <script>
                                getColor("pm25AQI");
                            </script>
                        </div>
                    }
                    @if (Model.AQIPM10 > 0)
                    {
                        <div class="column">
                            <div id="pm10AQI" class="circles">
                                <div>@Math.Round(Model.AQIPM10)</div>
                            </div>
                            <script>
                                getColor("pm10AQI");
                            </script>
                            <p class="name">PM 10</p>
                        </div>
                    }
                </div>
            </div>

            <div id="futureAQIGraph" class="graph-location">

            </div>
             @{ 
                if (Model.FutureAQIs[0].NO2AQI > 0 && Model.FutureAQIs[0].COAQI > 0)
                {
                    <script type="text/javascript">
                        var trace1 = {
                            x: ["7/20", "7/22", "7/24"],
                            y: [@Model.FutureAQIs[0].O3AQI, @Model.FutureAQIs[1].O3AQI, @Model.FutureAQIs[2].O3AQI],
                            name: 'O3',
                            type: 'scatter',
                            line: {
                                color: "green"
                            }
                        };

                        var trace2 = {
                            x: ["7/20", "7/22", "7/24"],
                            y: [@Model.FutureAQIs[0].NO2AQI, @Model.FutureAQIs[1].NO2AQI, @Model.FutureAQIs[2].NO2AQI],
                            name: 'NO2',
                            type: 'scatter',
                            line: {
                                color: "green"
                            }
                        };

                        var trace3 = {
                            x: ["7/20", "7/22", "7/24"],
                            y: [@Model.FutureAQIs[0].COAQI, @Model.FutureAQIs[1].COAQI, @Model.FutureAQIs[2].COAQI],
                            name: 'CO',
                            type: 'scatter',
                            line: {
                                color: "green"
                            }
                        };

                        var data = [trace1, trace2, trace3];

                        var layout = {
                            font: {
                                color: "white",
                            },
                            width: 400,
                            height: 300,
                            paper_bgcolor: 'rgba(0,0,0,0)',
                            plot_bgcolor: 'rgba(0,0,0,0)',
                            title: "Future AQIs",
                            xaxis: {
                                title: "Date"
                            },
                            yaxis: {
                                title: "AQIs"
                            }
                        };

                        Plotly.newPlot('futureAQIGraph', data, layout, { showSendToCloud: true });
                    </script>

                }
                else if (Model.FutureAQIs[0].COAQI > 0)
                {
                    <script>
                     var trace1 = {
                            x: ["7/20", "7/22", "7/24"],
                            y: [@Model.FutureAQIs[0].O3AQI, @Model.FutureAQIs[1].O3AQI, @Model.FutureAQIs[2].O3AQI],
                            name: 'O3',
                            type: 'scatter',
                            line: {
                                 color: "green"
                            }
                        };

                        var trace2 = {
                            x: ["7/20", "7/22", "7/24"],
                            y: [@Model.FutureAQIs[0].COAQI, @Model.FutureAQIs[1].COAQI, @Model.FutureAQIs[2].COAQI],
                            name: 'CO',
                            type: 'scatter',
                            line: {
                                color: "green"
                            }
                        };

                        var data = [trace1, trace2];
                        var layout = {
                            font: {
                                color: "white",
                            },
                            width: 400,
                            height: 300,
                            paper_bgcolor: 'rgba(0,0,0,0)',
                            plot_bgcolor: 'rgba(0,0,0,0)',
                            title: "Future AQIs",
                            xaxis: {
                                title: "Date"
                            },
                            yaxis: {
                                title: "AQIs"
                            }
                        };

                        Plotly.newPlot('futureAQIGraph', data, layout, { showSendToCloud: true });
                    </script>
                }
                else if (Model.FutureAQIs[0].NO2AQI > 0)
                {
                    <script>
                         var trace1 = {
                            x: ["7/20", "7/22", "7/24"],
                            y: [@Model.FutureAQIs[0].O3AQI, @Model.FutureAQIs[1].O3AQI, @Model.FutureAQIs[2].O3AQI],
                            name: 'O3',
                            type: 'scatter',
                            line: {
                                color: "green"
                            }
                        };

                        var trace2 = {
                            x: ["7/20", "7/22", "7/24"],
                            y: [@Model.FutureAQIs[0].NO2AQI, @Model.FutureAQIs[1].NO2AQI, @Model.FutureAQIs[2].NO2AQI],
                            name: 'NO2',
                            type: 'scatter',
                            line: {
                                color: "green"
                            }
                        };

                        var data = [trace1, trace2];

                        var layout = {
                            font: {
                                color: "white",
                            },
                            width: 400,
                            height: 300,
                            paper_bgcolor: 'rgba(0,0,0,0)',
                            plot_bgcolor: 'rgba(0,0,0,0)',
                            title: "Future AQIs",
                            xaxis: {
                                title: "Date"
                            },
                            yaxis: {
                                title: "AQIs"
                            }
                        };

                        Plotly.newPlot('futureAQIGraph', data, layout, { showSendToCloud: true });
                    </script>

                }
                else
                {
                    <script>
                         var trace1 = {
                            x: ["7/20", "7/22", "7/24"],
                            y: [@Model.FutureAQIs[0].O3AQI, @Model.FutureAQIs[1].O3AQI, @Model.FutureAQIs[2].O3AQI],
                            name: 'O3',
                            type: 'scatter',
                            line: {
                                color: "green"
                            }
                            };

                        var data = [trace1];
                        var layout = {
                            font: {
                                color: "white",
                            },
                            width: 400,
                            height: 300,
                            paper_bgcolor: 'rgba(0,0,0,0)',
                            plot_bgcolor: 'rgba(0,0,0,0)',
                            title: "Future AQIs",
                            xaxis: {
                                title: "Date"
                            },
                            yaxis: {
                                title: "AQIs"
                            }
                        };
                        Plotly.newPlot('futureAQIGraph', data, layout, { showSendToCloud: true });
                    </script>

                }

            }
                <!-- CO 1-Day: @Model.FutureAQIs[0].COAQI -->
                <!-- CO 3-Day: @Model.FutureAQIs[1].COAQI -->
                <!-- CO 5-Day: @Model.FutureAQIs[2].COAQI -->
                <!-- O3 1-Day: @Model.FutureAQIs[0].O3AQI -->
                <!-- O3 3-Day: @Model.FutureAQIs[1].O3AQI -->
                <!-- O3 5-Day: @Model.FutureAQIs[2].O3AQI -->
                <!-- NO2 1-Day: @Model.FutureAQIs[0].NO2AQI -->
                <!-- NO2 3-Day: @Model.FutureAQIs[1].NO2AQI -->
                <!-- NO2 5-Day: @Model.FutureAQIs[2].NO2AQI -->

            <div class="legend-box">
                <div class="column column-legend ">
                    <div class="legend green">
                        <div>0-50</div>
                    </div>
                    <p class="description">Good</p>
                </div>
                <div class="column column-legend ">
                    <div class="legend yellow">
                        <div>51-100</div>
                    </div>
                    <p class="description">Moderate</p>
                </div>
                <div class="column column-legend ">
                    <div class="legend orange">
                        <div>101-150</div>
                    </div>
                    <p class="description">Unhealthy for Sensitive Groups</p>
                </div>
                <div class="column column-legend ">
                    <div class="legend red">
                        <div>151-200</div>
                    </div>
                    <p class="description">Unhealthy</p>
                </div>
                <div class="column column-legend ">
                    <div class="legend purple">
                        <div>201-300</div>
                    </div>
                    <p class="description">Very Unhealthy</p>
                </div>
                <div class="column column-legend ">
                    <div class="legend dark-red">
                        <div>301-500</div>
                    </div>
                    <p class="description">Hazardous</p>
                </div>
            </div>
        </div>


        <div id="map" class="current mapside">
            @*<iframe class="map-page2" src="https://www.google.com/maps/d/embed?mid=1_DPTiL1WmEPsVSvh1wVOYvSzAa7FZ9aF"
                    width="100%" height="100%" ;></iframe>*@
        </div>

        <script>

            function initMap() {

            var userLatLong = { lat: @Model.UserLatitude, lng: @Model.UserLongitude };

            var sensorLatLong = { lat: @Model.Sensor.Lat, lng: @Model.Sensor.Long };

            var map = new google.maps.Map(
                document.getElementById('map'),
                    { zoom: 12, center: userLatLong });

            var iconBase = "http://maps.google.com/mapfiles/kml/pal2/";

            var markerUser = new google.maps.Marker({
                position: userLatLong,
                icon: { url: iconBase + "icon10.png"},
                map: map
            });

            var markerSensor = new google.maps.Marker({
                position: sensorLatLong,
                title: "",
                label: { color: 'black', fontWeight: 'bold', fontSize: '20px', text: '@Math.Round(Model.HighestAQI)' },
                icon: {
                    path: google.maps.SymbolPath.CIRCLE,
                    scale: 20,
                    fillColor: "@Model.AQIColor1",
                    fillOpacity: 1,
                    strokeWeight: 0
                },
                map: map
            });
        }
        </script>



        <hr />

        <script async defer
                src="https://maps.googleapis.com/maps/api/js?key=@APIKeys.SteveGoogleMapAPI&callback=initMap">

        </script>



    </main>
</body>
